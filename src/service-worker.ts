/// <reference lib="webworker" />

// Cache name and timestamp to distinguish different caches
const CACHE_NAME = 'v1'; // Replace 'v1' with the desired cache version
const TIMESTAMP = '<%= new Date() %>'; // Replace with the actual timestamp value

// `build` is an array of all the files generated by the bundler,
// `files` is an array of everything in the `static` directory
import { build, files } from '$service-worker';

const worker = (self as unknown) as ServiceWorkerGlobalScope;
const to_cache = build.concat(files);
const staticAssets = new Set(to_cache);

// Install event - cache static assets
worker.addEventListener('install', (event) => {
  event.waitUntil(
    caches
      .open(CACHE_NAME)
      .then((cache) => cache.addAll(to_cache))
      .then(() => {
        worker.skipWaiting();
      })
  );
});

// Activate event - clear old caches
worker.addEventListener('activate', (event) => {
  event.waitUntil(
    caches.keys().then(async (keys) => {
      for (const key of keys) {
        if (key !== CACHE_NAME) await caches.delete(key);
      }
      worker.clients.claim();
    })
  );
});

/**
 * Fetch the asset from the network and store it in the cache.
 * Fall back to the cache if the user is offline.
 */
async function fetchAndCache(request: Request) {
  const cache = await caches.open(`offline${TIMESTAMP}`);

  try {
    const response = await fetch(request);
    cache.put(request, response.clone());
    return response;
  } catch (err) {
    const response = await cache.match(request);
    if (response) return response;

    throw err;
  }
}

// Fetch event - serve static assets from cache
worker.addEventListener('fetch', (event) => {
  if (event.request.method !== 'GET' || event.request.headers.has('range')) return;

  const url = new URL(event.request.url);
  const isHttp = url.protocol.startsWith('http');
  const isDevServerRequest =
    url.hostname === self.location.hostname && url.port !== self.location.port;
  const isStaticAsset = url.host === self.location.host && staticAssets.has(url.pathname);
  const skipBecauseUncached = event.request.cache === 'only-if-cached' && !isStaticAsset;

  if (isHttp && !isDevServerRequest && !skipBecauseUncached) {
    event.respondWith(
      (async () => {
        const cachedAsset = isStaticAsset && (await caches.match(event.request));

        return cachedAsset || fetchAndCache(event.request);
      })()
    );
  }
});

// Push event - handle push notifications
self.addEventListener('push', function (event) {
  const iconUrl = '/logo.png';
  const pushData = event.data.json(); // Parse the event data as JSON

  // Extract the head, body, and click data from the push data
  const head = pushData.head || 'FoodStock' || 'New Notification ðŸ•ºðŸ•º';
  const body = pushData.body || "This is default content. Your notification didn't have one ðŸ™„ðŸ™„";
  const clickData = pushData.click_data || {};

  event.waitUntil(
    self.registration.showNotification(head, {
      body: body,
      icon: iconUrl,
      data: clickData, // Pass the click data to the notification
    })
  );
});

// Notification click event - handle notification click actions
self.addEventListener('notificationclick', function (event) {
  event.notification.close();

  // Retrieve the click data from the notification
  const clickData = event.notification.data;

  if (clickData) {
    event.waitUntil(
      clients.matchAll({
        type: 'window',
      }).then(function () {
        if (clients.openWindow) {
          return clients.openWindow(clickData);
        }
      })
    );
  }
});
